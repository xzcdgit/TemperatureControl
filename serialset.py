#-*- coding: utf-8 -*-
import binascii
import serial
import serial.tools.list_ports
import time


def serialsearch() -> str:  #可用串口查询
    '''
  可用串口查询
  @返回
  str: 以字符串的方式返回可用的串口信息
  '''
    ports_list = list(serial.tools.list_ports.comports())
    if len(ports_list) <= 0:
        re_str = '无可用串口'
    else:
        re_str = '可用串口列表\n'
        for comport in ports_list:
            re_str = re_str + list(comport)[0] + '  ' + list(comport)[1] + '\n'
    return re_str


table_crc_hi = (0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40)

table_crc_lo = (0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
                0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
                0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
                0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
                0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
                0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
                0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
                0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
                0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
                0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
                0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
                0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
                0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
                0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
                0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
                0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
                0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
                0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
                0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
                0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
                0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
                0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
                0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
                0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
                0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
                0x43, 0x83, 0x41, 0x81, 0x80, 0x40)


def crc16(st):
    '''
    CRC-16/MODBUS 校验 查表法
    @返回
    hex: 16进制数
    '''
    crc_hi = crc_lo = 0xFF
    L = []
    st = st.strip().replace(' ', '')
    if len(st) % 2:
        return None
    for j in range(0, len(st), 2):
        L.append(st[j:(j + 2)])
    i = 0
    for ch in L:
        ch = int(ch, 16)
        i = crc_hi ^ ch
        crc_hi = crc_lo ^ table_crc_hi[i]
        crc_lo = table_crc_lo[i]
    result = hex(crc_hi << 8 | crc_lo)
    addition = 6 - len(result)
    if addition > 0:
        result = result.replace('x', 'x' + '0' * addition)
    return result


def calc_crc(string):
    '''
    CRC-16/MODBUS 校验 计算法
    @返回
    hex: 16进制数
    '''
    data = bytearray.fromhex(string)
    crc = 0xFFFF
    for pos in data:
        crc ^= pos
        for i in range(8):
            if ((crc & 1) != 0):
                crc >>= 1
                crc ^= 0xA001
            else:
                crc >>= 1
    return hex(((crc & 0xff) << 8) + (crc >> 8))


class SerialCommunication:
    '''
  串口通信类 用于创建串口对象 发送和接收串口数据 已经数据的校验计算
  '''

    def __init__(self, parent=None):
        '''
    构造函数 预设了通信所需的字符串组
    '''
        self.order = '01 04 00 00 00 08 F1 CC'
        self.num = 8

    def serialCreate(self, portname, baudrate):
        '''
    创建串口对象
    '''
        self.sercon = serial.Serial(portname, baudrate)  #创建串口对象

    def serialClose(self):
        '''
    关闭串口
    '''
        self.sercon.close()

    def autoFresh(self) -> list[float]:
        '''
    数据自动刷新函数 
    @返回
    list: 带有4个整型数据的列表 分别代表 设备8个通道收集的脉冲数量（双通道模式收集）
    '''
        valueList = []
        senddata = self.order
        #获取数据反馈的指令    发送的字符串：01（设备号） 03（固定码） 01 00（该位为读取位置的选择） 00 02    校验码c5 f7（crc-16/modbus）
        senddata = bytes.fromhex(senddata)
        #向串口发送数据
        self.sercon.write(senddata)
        recdata = ''
        key = self.sercon.in_waiting
        while key < 13:
            #等待串口数据回传
            key = self.sercon.in_waiting
        recdata = str(binascii.b2a_hex(self.sercon.read(self.num*2+5)))[
            2:-1]  #读取2*读取通道数+5个字节 设备地址 功能码 数据长度 2*通道数 校验高位 校验低位 合计21
        ufdata = recdata[0:-4]
        crcdata = recdata[-4:]
        crctab = crc16(ufdata)
        #crc校验，未完成
        #if int(crcdata,16) == int(crctab,16):
        #  pass
        for i in range(self.num):
            tmpIndex = i * 4 + 6
            tmpData = int(recdata[tmpIndex:tmpIndex + 4], 16)
            if (tmpData == 65535):
                tmpData = 0
            elif (tmpData > 32768):
                tmpData = round((tmpData - 65536) * 0.1, 1)
            else:
                tmpData = round(tmpData * 0.1, 1)
            valueList.append(tmpData)
        valueList.insert(0, time.time())
        return valueList
